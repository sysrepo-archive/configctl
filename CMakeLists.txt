CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(libconfigctl)

# set version
SET(CONFIGCTL_MAJOR_VERSION 0)
SET(CONFIGCTL_MINOR_VERSION 1)
SET(CONFIGCTL_MICRO_VERSION 1)
SET(CONFIGCTL_VERSION ${CONFIGCTL_MAJOR_VERSION}.${CONFIGCTL_MINOR_VERSION}.${CONFIGCTL_MICRO_VERSION})
SET(CONFIGCTL_SOVERSION ${CONFIGCTL_MAJOR_VERSION}.${CONFIGCTL_MINOR_VERSION})

ADD_DEFINITIONS(-Os -Wall --std=gnu11 -Wmissing-declarations -D_GNU_SOURCE)
INCLUDE_DIRECTORIES(include)

FILE(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/build/modules")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
SET(LIB_INSTALL_DIR lib)
SET(INCLUDE_INSTALL_DIR include/libconfigctl)

OPTION(ENABLE_BUILD_TESTS "Build tests" ON)
OPTION(ENABLE_GIT "Enable Git support" OFF)
OPTION(ENABLE_DEBUG "Enable debug messages" ON)
OPTION(JAVA_BINDING "Generate bindings for Java" OFF)
SET(PYTHON_BINDING "" CACHE STRING "Generate bindings for Python")

IF(ENABLE_DEBUG)
	ADD_DEFINITIONS(-DDEBUG)
endif()

SET(SOURCES
	src/configctl.c
	src/configctl.h
	src/edit.c
	src/edit.h
	src/functions.c
	src/functions.h
	src/git.c
	src/git.h
	src/main.c
)

SET(HEADERS
	src/configctl.h
)

ADD_LIBRARY(libconfigctl SHARED ${SOURCES})
SET_TARGET_PROPERTIES(libconfigctl PROPERTIES VERSION ${CONFIGCTL_VERSION} SOVERSION ${CONFIGCTL_SOVERSION} PREFIX "")
SET(LIBS ${LIBS} libconfigctl)

# find pcre
FIND_PACKAGE(PCRE REQUIRED)
TARGET_LINK_LIBRARIES(libconfigctl ${PCRE_LIBRARY})
set(LIBS ${LIBS} ${PCRE_LIBRARY})

# find libyang
FIND_PACKAGE(LIBYANG REQUIRED)
INCLUDE_DIRECTORIES(${LIBYANG_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(libconfigctl ${LIBYANG_LIBRARY})
set(LIBS ${LIBS} ${LIBYANG_LIBRARY})

IF(ENABLE_GIT)
	ADD_DEFINITIONS(-DGIT)
	# find libgit2
	FIND_PACKAGE(LIBGIT2 REQUIRED)
	INCLUDE_DIRECTORIES(${LIBGIT2_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(libconfigctl ${LIBGIT2_LIBRARY})
	set(LIBS ${LIBS} ${LIBGIT2_LIBRARY})
ENDIF()

install(TARGETS libconfigctl DESTINATION ${LIB_INSTALL_DIR})
install(FILES ${HEADERS} DESTINATION ${INCLUDE_INSTALL_DIR})

IF(ENABLE_BUILD_TESTS)
	ENABLE_TESTING()
	FIND_PACKAGE(CMOCKA REQUIRED)
	ADD_SUBDIRECTORY(tests)
ENDIF()

ADD_EXECUTABLE(configctl ${SOURCES})
TARGET_LINK_LIBRARIES(configctl ${LIBS})
INSTALL(TARGETS configctl RUNTIME DESTINATION bin)


IF("${PYTHON_BINDING}" STREQUAL "2")
	FIND_PACKAGE(SWIG REQUIRED)
	INCLUDE(${SWIG_USE_FILE})
	FIND_PACKAGE(PythonLibs 2 REQUIRED)
	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
	SET(CMAKE_SWIG_FLAGS "-Wall")
	SWIG_ADD_MODULE(configctl_py2 python ./build/swig/configctl_py2.i ${SOURCES})
	SWIG_LINK_LIBRARIES(configctl_py2 ${PYTHON_LIBRARIES} ${LIBGIT2_LIBRARY} ${LIBYANG_LIBRARY} ${PCRE_LIBRARY})
ENDIF()

IF("${PYTHON_BINDING}" STREQUAL "3")
	FIND_PACKAGE(SWIG REQUIRED)
	INCLUDE(${SWIG_USE_FILE})
	FIND_PACKAGE(PythonLibs 3 REQUIRED)
	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
	SET(CMAKE_SWIG_FLAGS "-Wall")
	SWIG_ADD_MODULE(configctl_py3 python ./build/swig/configctl_py3.i ${SOURCES})
	SWIG_LINK_LIBRARIES(configctl_py3 ${PYTHON_LIBRARIES} ${LIBGIT2_LIBRARY} ${LIBYANG_LIBRARY} ${PCRE_LIBRARY})
ENDIF()

# export JAVA_HOME=/usr/lib/jvm/java-7-openjdk
IF(JAVA_BINDING)
	FIND_PACKAGE(Java REQUIRED)
	FIND_PACKAGE(JNI REQUIRED)
	FIND_PACKAGE(SWIG REQUIRED)
	INCLUDE(UseJava)
	INCLUDE(UseSWIG)

	INCLUDE(${SWIG_USE_FILE})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
	INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})
	INCLUDE_DIRECTORIES(${JAVA_INCLUDE_DIRS})
	SET(CMAKE_SWIG_FLAGS "")

	SET(CMAKE_SWIG_OUTDIR "${CMAKE_CURRENT_BINARY_DIR}/java")
	FILE(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/classes")

	SWIG_ADD_MODULE(configctl_java java ./build/swig/configctl_java.i ${SOURCES})
	SWIG_LINK_LIBRARIES(configctl_java ${JAVA_LIBRARIES} ${LIBTCOD_NAME} ${LIBTCOD_CPP_NAME} ${LIBGIT2_LIBRARY} ${LIBYANG_LIBRARY} ${PCRE_LIBRARY})

	ADD_CUSTOM_COMMAND(TARGET configctl_java POST_BUILD COMMAND "${Java_JAVAC_EXECUTABLE}" -d classes java/*.java COMMAND "${Java_JAR_EXECUTABLE}" -cfM Configctl.jar -C classes . )
	SET(NATIVE_JAR "${CMAKE_CURRENT_BINARY_DIR}/Configctl.jar")
ENDIF()

SET(CMAKE_GENERATED_FILES
	${CMAKE_BINARY_DIR}/CMakeCache.txt
	${CMAKE_BINARY_DIR}/CTestTestfile.cmake
	${CMAKE_BINARY_DIR}/cmake_install.cmake
)

SET_PROPERTY(DIRECTORY ${EXECUTABLE_OUTPUT_PATH} PROPERTY ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_GENERATED_FILES}")
